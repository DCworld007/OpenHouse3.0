// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ownedRooms    PlanningRoom[] @relation("RoomOwner")
  roomMemberships RoomMember[]
  generatedInvites InviteToken[] @relation("InviteGenerator")
  createdCards  Card[] @relation("CardCreator")
  messages      Message[]
  reactions     Reaction[]
  activities    Activity[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model PlanningRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation("RoomOwner", fields: [ownerId], references: [id])
  members     RoomMember[]
  inviteTokens InviteToken[]
  cards       CardRoomLink[]
  messages    Message[]
  activities  Activity[]
  linkedFromGroups LinkedGroup[] @relation("SourceGroup")
  linkedToGroups   LinkedGroup[] @relation("LinkedGroup")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
}

model RoomMember {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  role      String   @default("member")
  joinedAt  DateTime @default(now())
  room      PlanningRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([userId])
}

model InviteToken {
  id               String      @id @default(cuid())
  token            String      @unique
  planningRoom     PlanningRoom @relation(fields: [planningRoomId], references: [id], onDelete: Cascade)
  planningRoomId   String
  generatedByUser  User       @relation("InviteGenerator", fields: [generatedByUserId], references: [id], onDelete: Cascade)
  generatedByUserId String
  createdAt        DateTime   @default(now())
  expiresAt        DateTime?
  maxUses          Int?
  usesCount        Int       @default(0)
  isActive         Boolean   @default(true)

  @@index([token])
  @@index([planningRoomId, isActive])
}

model Card {
  id          String    @id @default(cuid())
  type        String
  content     String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("CardCreator", fields: [createdById], references: [id])
  createdById String
  rooms       CardRoomLink[]

  @@index([createdById])
}

model CardRoomLink {
  id          String    @id @default(cuid())
  cardId      String
  roomId      String
  card        Card      @relation(fields: [cardId], references: [id])
  room        PlanningRoom @relation(fields: [roomId], references: [id])
  createdAt   DateTime  @default(now())

  @@unique([cardId, roomId])
  @@index([roomId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  userId      String
  roomId      String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  room        PlanningRoom @relation(fields: [roomId], references: [id])
  reactions   Reaction[]

  @@index([roomId])
  @@index([userId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  messageId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId, emoji])
  @@index([messageId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LinkedGroup {
  id             String   @id @default(cuid())
  sourceGroupId  String
  linkedGroupId  String
  createdAt      DateTime @default(now())
  sourceGroup    PlanningRoom @relation("SourceGroup", fields: [sourceGroupId], references: [id])
  linkedGroup    PlanningRoom @relation("LinkedGroup", fields: [linkedGroupId], references: [id])

  @@unique([sourceGroupId, linkedGroupId])
}

model Activity {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  type      String
  context   String?
  timestamp DateTime @default(now())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     PlanningRoom @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([userId])
  @@index([timestamp])
} 