// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String?
  access_token     String?
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  ownedRooms    PlanningRoom[] @relation("RoomOwner")
  roomMembers   RoomMember[]
  messages      Message[]
  reactions     Reaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Card {
  id          String    @id @default(cuid())
  content     String
  notes       String?
  cardType    String    // 'what' or 'where'
  imageUrl    String?
  groupId     String?
  order       Int       @default(0)
  userId      String    // Owner of the card
  user        User      @relation(fields: [userId], references: [id])
  roomLinks   CardRoomLink[]
  reactions   Reaction[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PlanningRoom {
  id          String    @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User      @relation("RoomOwner", fields: [ownerId], references: [id])
  members     RoomMember[]
  messages    Message[]
  cardLinks   CardRoomLink[]
  inviteToken String    @unique
  shareable   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  linkedGroups      LinkedGroup[] @relation("SourceGroup")
  linkedToThisRoom  LinkedGroup[] @relation("LinkedGroup")
}

model RoomMember {
  id          String    @id @default(cuid())
  userId      String
  roomId      String
  role        String    // 'owner', 'editor', 'viewer'
  user        User      @relation(fields: [userId], references: [id])
  room        PlanningRoom @relation(fields: [roomId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, roomId])
}

model CardRoomLink {
  id          String    @id @default(cuid())
  cardId      String
  roomId      String
  order       Int       @default(0)
  card        Card      @relation(fields: [cardId], references: [id])
  room        PlanningRoom @relation(fields: [roomId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([cardId, roomId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  userId      String
  roomId      String
  user        User      @relation(fields: [userId], references: [id])
  room        PlanningRoom @relation(fields: [roomId], references: [id])
  reactions   Reaction[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Reaction {
  id          String    @id @default(cuid())
  type        String    // e.g., 'like', 'heart', 'thumbsup'
  userId      String
  messageId   String?
  cardId      String?
  user        User      @relation(fields: [userId], references: [id])
  message     Message?  @relation(fields: [messageId], references: [id])
  card        Card?     @relation(fields: [cardId], references: [id])
  createdAt   DateTime  @default(now())

  @@unique([userId, messageId, cardId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LinkedGroup {
  id             String   @id @default(cuid())
  sourceGroupId  String
  linkedGroupId  String
  createdAt      DateTime @default(now())
  sourceGroup    PlanningRoom @relation("SourceGroup", fields: [sourceGroupId], references: [id])
  linkedGroup    PlanningRoom @relation("LinkedGroup", fields: [linkedGroupId], references: [id])
  @@unique([sourceGroupId, linkedGroupId])
} 